" ========== Vim Basic Settings ============="

filetype off

execute pathogen#infect()
filetype plugin indent on
syntax on

" ========================================================================================
" Make vim incompatbile to vi.
set nocompatible
set modelines=0

" ========================================================================================
"TAB settings.
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set showtabline=4
""set ruler=2

" ========================================================================================
" More Common Settings.
set encoding=utf-8
set scrolloff=3
""set autoindent
set showmode
set showcmd
set hidden
set visualbell

set history=1000
set undolevels=10000

set nobackup
set noswapfile

set ttyfast
set ruler
set backspace=indent,eol,start

set pastetoggle=<F2>
"set relativenumber
set number
set norelativenumber

set undofile
set undodir=/tmp

set shell=/bin/bash
set lazyredraw
set matchtime=3

" ========================================================================================
"Changing Leader Key
let mapleader = ","

" ========================================================================================
" Map : to ; also in command mode.
nnoremap ; :
vmap ; :
nmap <silent> <leader>/ :nohlsearch<CR>
" ========================================================================================

" Set title to window
set title

" ========================================================================================
" Make Vim able to edit corntab fiels again.
set backupskip=/tmp/*,/private/tmp/*"

" ========================================================================================
" Enable Mouse
set mouse=a

" ========================================================================================
"Settings for Searching and Moving
nnoremap / /\c
vnoremap / /\c
set ignorecase
set smartcase
set incsearch
set showmatch
set hlsearch
nnoremap <leader><space> :noh<cr>
"nnoremap <tab> %
"vnoremap <tab> %

" ========================================================================================
" go to next/previous tag
nnoremap <leader>f :tnext<cr>
nnoremap <leader>d :tprev<cr>
nnoremap <leader>tj :tjump<cr>

" ========================================================================================
" Make Vim to handle long lines nicely." ========================================================================================
" search but say in the current search occurance
nmap * *N

set wrap
set textwidth=79
" set colorcolumn=+1
set formatoptions=qrn1
" set colorcolumn=79

" ========================================================================================
" To  show special characters in Vim
"set list
set listchars=tab:▸\ ,eol:¬

" ========================================================================================
" set unnamed clipboard
set clipboard=unnamedplus

"==========================================================================="
" Different search patterns 
let g:cpp_pattern = "*.{cpp,c,h,hpp}"
let g:java_pattern = "*.{java}"
let g:makefile_pattern = "Makefile*"
let g:text_pattern = "*.{txt,text}"
let g:python_pattern = "*.{py}"
let g:cpp_java_pattern = "*.{cpp,c,h.hpp,java,cc,hh}"

"==========================================================================="
" Working with split screen nicely

"==========================================================================="
" Manpage for word under cursor via 'K' in command moderuntime
runtime ftplugin/man.vim
noremap <buffer> <silent> K :exe "Man" expand('<cword>') <CR>
" Resize Split When the window is resized"
au VimResized * :wincmd =

"==========================================================================="
" Wildmenu completion "
set wildmenu
set wildmode=list:longest
set wildignore+=.hg,.git,.svn " Version Controls"
set wildignore+=*.aux,*.out,*.toc "Latex Indermediate files"
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg "Binary Imgs"
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest "Compiled Object files"
set wildignore+=*.spl "Compiled speolling world list"
set wildignore+=*.sw? "Vim swap files"
set wildignore+=*.DS_Store "OSX SHIT"
set wildignore+=*.luac "Lua byte code"
set wildignore+=migrations "Django migrations"
set wildignore+=*.pyc "Python Object codes"
set wildignore+=*.orig,*.rej "Merge resolution files"

"==========================================================================="
" Make Sure that Vim returns to the same line when we reopen a file"
augroup line_return
    au!
    au BufReadPost *
                \ if line("'\"") > 0 && line("'\"") <= line("$") |
                \ execute 'normal! g`"zvzz' |
                \ endif
augroup END

"==========================================================================="
" go to place of last change
nnoremap g; g;zz

" =========== END Basic Vim Settings ===========


" =========== Gvim Settings =============

" Removing scrollbars
if has("gui_running")
    set guitablabel=%-0.12t%M
    "set guioptions-=T
    set guioptions-=r
    "set guioptions-=L
    set guioptions+=a
    set guioptions-=m
    colo ron
    set listchars=tab:▸\ ,eol:¬         " Invisibles using the Textmate style
else
    set t_Co=256
    colorschem ron
endif

" ========== END Gvim Settings ==========

"==========================================================================="
" Make check spelling on or off 
nmap <leader>cson   :set spell<CR>
nmap <leader>csoff  :set nospell<CR>

"==========================================================================="
" Indentation (got to opening bracket and indent section) 

nmap <leader>ip [{=%

"==========================================================================="
"Highlight section between brackets (do to opening bracket and highlight)
nmap <leader>hp [{%v%<Home>
"
"==========================================================================="
" Map copy delete and paste to system clipboard
"
vmap <Leader>y "+y
vmap <Leader>d "+d

nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P

vmap <C-c> "+yi
vmap <C-x> "+c
vmap <C-v> c<ESC>"+p
imap <C-v> <ESC>"+pa

"==========================================================================="
" Double learder for selection whole line
nmap <Leader>v V

"==========================================================================="
" Force Saving Files that Require Root Permission
"
command! Sudowrite w !sudo tee % > /dev/null

"==========================================================================="
" TAB and Shift-TAB in normal mode cycle buffers
"
nmap <Tab> :bn<CR>
nmap <S-Tab> :bp<CR>

"==========================================================================="
" highlight current line
set cursorline

"==========================================================================="
" Configure autocomplete tool
let g:acp_EnableAtStartup = 1

"==========================================================================="
set laststatus=2
set statusline=%F%m%r%h%w[%L][%{&ff}]%y[%p%%][%04l,%04v]

set nowrap
set expandtab

"==========================================================================="
" Edit .vimrc file
nmap <silent> <leader>ov :e $MYVIMRC<CR>
nmap <silent> <leader>sv :w<CR> :so $MYVIMRC<CR>

"==========================================================================="
" Map SyntasticCheck to F4 
"
noremap <silent> <F4> :SyntasticCheck<CR>
noremap! <silent> <F4> <ESC>:SyntasticCheck<CR>

"==========================================================================="
au BufNewFile,BufRead *.c,*.cc,*.cpp,*.h call SetupCandCPPenviron()
function! SetupCandCPPenviron()
    "
    " Search path for 'gf' command (e.g. open #include-d files)
    "
    set path+=/usr/include/c++/**

    "
    " Especially for C and C++, use section 3 of the manpages
    "
    noremap <buffer> <silent> K :exe "Man" 3 expand('<cword>') <CR>
endfunction

function! IsFileAlreadyExists(filename)
   if filereadable(a:filename)
        return 1
    else 
        return 0
    endif
endfunction

"==========================================================================="
"Invoke this function if we are opening main.cpp or main.c file"
function! CheckIfMain()
    if !IsFileAlreadyExists(expand("%:t")) && expand("%:t:r") == "main" && expand("%:e") == "cpp"
        execute 'normal! 1G 1000dd'
        execute ':Template maincpp'
        execute ':w'
    elseif !IsFileAlreadyExists(expand("%:t")) && expand("%:t:r") == "main" && expand("%:e") == "c"
        execute 'normal! 1G 1000dd' 
        execute ':Template mainc'
        execute ':w'
    endif
endfunction

"==========================================================================="
"Invoke this function when you would like to create new C++ class files (.cpp
"and .h file)"
function! CreateCppClassFiles(className)
    "create cpp file
    if !IsFileAlreadyExists(a:className.'.cpp')
        execute ':n '.a:className.'.cpp'
        execute 'normal! 1G 1000dd'
        execute ':Template cppclass'
        execute ':w'
    else
        execute ':n '.a:className.'.cpp'
    endif 
    "create h file
    if !IsFileAlreadyExists(a:className.'.h')
        execute ':n '.a:className.'.h'
        execute 'normal! 1G 1000dd'
        execute ':Template cppclassh'
        execute ':w'
    else
        execute ':n '.a:className.'.h'
    endif
endfunction

"create new command for creating cpp class"
command! -nargs=1 NewCppClass call CreateCppClassFiles("<args>")

"==========================================================================="
" setting ctags
set tags=./tags,tags;
"set tags+=~/.vim/tags/last_project_tags
"set tags+=~/.vim/tags/dtv_project_tags
"set tags+=~/.vim/tags/gstreamer_tags
"set tags+=~/.vim/tags/mythtv_tags
"set tags+=~/.vim/tags/cpp_tags
"set tags+=~/.vim/tags/usr_local_include_tags

"==========================================================================="
set autochdir
let NERDTreeChDirMode=2

" =========== END Plugin Settings =========="


"==========================================================================="
" Save and load session
"
map <leader>ss :SessionSaveAs user_auto_saved_session<cr>:NERDTree .<cr>
map <leader>so :SessionOpen user_auto_saved_session<cr><C-d><C-d>,n:NERDTree .<cr>

"==========================================================================="
""Open default session (session saved during closing vim)
map <leader>sd :SessionOpen vim_auto_saved_session<cr>:NERDTree .<cr> 

" =========== Startup commands =========="
if &diff 
    "autocmd VimEnter * NERDTree .
else 
    "autocmd VimEnter * NERDTree .
"     autocmd VimEnter * helptags ~/.vim/doc
    "autocmd VimEnter * exe 2 . "wincmd w"
    "autocmd VimEnter * call CheckIfMain()
    "autocmd VimEnter * call DetectFileType()

    autocmd BufWritePost ~/.vimrc source ~/.vimrc
    "au BufNewFile,BufRead * :set relativenumber " relative line numbers

endif

" =========== Leaving commands =========="

autocmd VimLeave * SessionSaveAs vim_auto_saved_session


"============ Configuration Omni Completion =============================="

filetype plugin on
autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType cpp set omnifunc=omni#cpp#complete#Main

if v:version >= 600
    filetype plugin on
    filetype indent on
else
    filetype on
endif

if v:version >= 700
    set omnifunc=syntaxcomplete#Complete " override built-in C omnicomplete with C++ OmniCppComplete plugin
    "let g:SuperTabDefaultCompletionType = "<C-@>" 
    let OmniCpp_NamespaceSearch     = 1
    let OmniCpp_GlobalScopeSearch   = 1
    let OmniCpp_DisplayMode         = 1
    let OmniCpp_ShowScopeInAbbr     = 0 "do not show namespace in pop-up
    let OmniCpp_ShowPrototypeInAbbr = 1 "show prototype in pop-up
    let OmniCpp_ShowAccess          = 1 "show access in pop-up
    let OmniCpp_SelectFirstItem     = 2 "select first item in pop-up
    let OmniCpp_MayCompleteDot      = 1
    let OmniCpp_MayCompleteArrow    = 1
    let OmniCpp_MayCompleteScope    = 1
    let OmniCpp_DefaultNamespaces   = ['std','_GLIBCXX_STD']

    set completeopt=menuone,menu,longest,preview

    " Use Ctrl+Space for omni-completion
    " https://stackoverflow.com/questions/510503/ctrlspace-for-omni-and-keyword-completion-in-vim
    inoremap <expr> <C-Space> pumvisible() \|\| &omnifunc == '' ?
        \ "\<lt>C-n>" :
        \ "\<lt>C-x>\<lt>C-o><c-r>=pumvisible() ?" .
        \ "\"\\<lt>c-n>\\<lt>c-p>\\<lt>c-n>\" :" .
        \ "\" \\<lt>bs>\\<lt>C-n>\"\<CR>"
    imap <C-@> <C-Space>

    " Popup menu hightLight Group
    highlight Pmenu ctermbg=13 guibg=LightGray
    highlight PmenuSel ctermbg=7 guibg=DarkBlue guifg=White
    highlight PmenuSbar ctermbg=7 guibg=DarkGray
    highlight PmenuThumb guibg=Black
endif

"===================================================================================================
" Commenting blocks of code.
autocmd FileType c,cppva,scala let b:comment_leader = '// '
autocmd FileType sh,ruby,python   let b:comment_leader = '# '
autocmd FileType conf,fstab       let b:comment_leader = '# '
autocmd FileType tex              let b:comment_leader = '% '
autocmd FileType mail             let b:comment_leader = '> '
autocmd FileType vim              let b:comment_leader = '" '
noremap <silent> <leader>cc :<C-B>silent <C-E>s/^/<C-R>=escape(b:comment_leader,'\/')<CR>/<CR>:nohlsearch<CR>
noremap <silent> <leader>cu :<C-B>silent <C-E>s/^\V<C-R>=escape(b:comment_leader,'\/')<CR>//e<CR>:nohlsearch<CR>'"'"


" ========================================================================================
" SURRENDINGS 

autocmd FileType c,cpp let b:surround_105  = "if (condition) {\n \r } \n"
autocmd FileType c,cpp let b:surround_102  = "for (int i=0; i<condition;i++) {\n\r}\n"
autocmd FileType c,cpp let b:surround_119  = "while (condition) {\n\r}\n"
autocmd FileType c,cpp let b:surround_112  = "printf(\"\r\\n\");"
autocmd FileType c,cpp let b:surround_99   = "/*\n\r*/"

autocmd FileType html  let b:surround_102  = "<font face=\"courier\">/r</font>"

" ========================================================================================

" ========================================================================================
" REFRESH COMMANDS

" warning: to refresh NERDTree just type 'r' being in NERD window

nmap <F5> :e<cr>
imap <F5> <ESC>l:e<cr>i

" ========================================================================================
" " USING VIM AS HEX EDITOR
map <Leader>hon :%!xxd<CR>
map <Leader>hof :%!xxd -r<CR>

" ========================================================================================
" " Resize split window horizontally and vertically
" Shortcuts to Shift-Alt-Up - Alt is mapped as M in vim
nmap <S-M-Up> :2winc+<cr>
imap <S-M-Up> <Esc>:2winc+<cr>i
nmap <S-M-Down> :2winc-<cr>
imap <S-M-Down> <Esc>:2winc-<cr>i

nmap <S-M-Left> :2winc><cr>
imap <S-M-Left> <Esc>:2winc><cr>i
nmap <S-M-Right> :2winc<<cr>
imap <S-M-Right> <Esc>:2winc<<cr>i

" ========================================================================================
" " localvimrc plugin 
" This plugin searches for local vimrc files in the file system tree of the
" currently opened file.
" https://github.com/embear/vim-localvimrc
" ========================================================================================
" 
let g:localvimrc_persistent=2 


" ========================================================================================
" " gototagwithlinenumber 

" This plugin allows going to file and line_number stored in tag (using ctags)
" It is useful ex. when we are working with project and have logs for project. 
" Then we can easly switch between logs and real source code using tags + functions
" ========================================================================================
" 
nmap <leader>gt :GotoFileWithLineNumTag <cr>

" ========================================================================================
" shortcuts for switch plugin
" ========================================================================================
" 
nmap <leader>- :Switch <cr>
nmap <leader>= :call switch#Switch(g:variable_style_switch_definitions) <cr>

" ========================================================================================
" " Set up scrolling winding one line up and down  
nnoremap <S-Up> <C-E>
nnoremap <S-Down> <C-Y> 

" ========================================================================================
" " Automatically go to the end of pasted text 
vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]
 
" ========================================================================================
" " Quickly select text which I just pasted  
noremap gV `[v`]

" ========================================================================================
" map ctrl+j to ctrl+m (for INSERT mode)in order to be more consistent with bash terminal 
let g:BASH_Ctrl_j='off'
inoremap <C-j> <C-m>
noremap  <C-j> <C-m>

" remap f{char} repetition keys shortcuts
noremap _ ,
noremap - ;

" ========================================================================================
" set F2 as shortcut for toggle INSERT (paste) mode    
nnoremap <F2> :set invpaste paste?<CR>

" ========================================================================================
" map last substitute execution to normal mode & operator
nnoremap & :&&<CR>
xnoremap & :&&<CR>

" ========================================================================================
" vimdiff options
" Always use vertical diffs 
set diffopt+=vertical

" ========================================================================================
" CtrlSF shortcuts
nmap     <C-F>f :exe "CtrlSF" expand('<cword>') <CR>
vmap     <C-F>F <Plug>CtrlSFVwordExec <CR>
nmap     <C-F>n <Plug>CtrlSFCwordPath <CR>
nmap     <C-F>p <Plug>CtrlSFPwordPath <CR>
nnoremap <C-F>o :CtrlSFOpen<CR>
nnoremap <C-F>t :CtrlSFToggle<CR>
inoremap <C-F>t <Esc>:CtrlSFToggle<CR>

" ========================================================================================
" remap movement for wrapped lines being the same as for non-wrapped lines
nnoremap k gk
nnoremap gk k
nnoremap j gj
nnoremap gj j

" ========================================================================================
" set middle of screen for new searches
nnoremap <silent>n nzz
nnoremap <silent>N Nzz
nnoremap <silent>* *zz
nnoremap <silent># #zz
nnoremap <silent>g* g*zz

" ========================================================================================
" toggle normal line numbers and relative line numbers
function! NumberToggle()
  if(&relativenumber == 1)
    set norelativenumber
  else
    set relativenumber
  endif
endfunc
nnoremap <leader>tn :call NumberToggle()<cr>
" ========================================================================================
iabbr /** /************************************************************************
iabbr **/ ************************************************************************/
iabbr //- //-----------------------------------------------------------------------

" " ========================================================================================
" run command conriguration
let g:vim_run_command_map = {
  \'javascript': 'node',
  \'php': 'php',
  \'python': 'python',
  \'bash': 'bash',
  \}
":Run yourcommand - runs selected command 
" '<,'>RunVisual - run commands from selected lines 
""AutoRun - autorun commands from file on each save
" " ========================================================================================
" ctrlp configuration
let g:ctrlp_map = '<C-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'
" " ========================================================================================
" ctrlp configuration
nmap <leader><leader>l :CtrlPLocate<cr>
" " ========================================================================================
" visualmarks configuration
nmap <leader>< <Plug>VisualMarksGetVisualMark


" " ========================================================================================
" set mutt-based variables 
"setlocal fo+=aw

" " ========================================================================================
" Make 0 go to the first character rather than the beginning
" of the line. When we're programming, we're almost always
" interested in working with text rather than empty space. If
" you want the traditional beginning of line, use ^
nnoremap 0 ^
nnoremap ^ 0

" " ========================================================================================
" ," Surround a word with "quotes"
map <leader>" ysiw"
vmap <leader>" c"<C-R>""<ESC>

" <leader>' Surround a word with 'single quotes'
map <leader>' ysiw'
vmap <leader>' c'<C-R>"'<ESC>
" <leader>) or ,( Surround a word with (parens)
" The difference is in whether a space is put in
map <leader>( ysiw(
map <leader>) ysiw)
vmap <leader>( c( <C-R>" )<ESC>
vmap <leader>) c(<C-R>")<ESC>

" <leader>[ Surround a word with [brackets]
map <leader>] ysiw]
map <leader>[ ysiw[
vmap <leader>[ c[ <C-R>" ]<ESC>
vmap <leader>] c[<C-R>"]<ESC>

" <leader>{ Surround a word with {braces}
map <leader>} ysiw}
map <leader>{ ysiw{
vmap <leader>} c{ <C-R>" }<ESC>
vmap <leader>{ c{<C-R>"}<ESC>

map <leader>` ysiw`

" " ========================================================================================
"Clear current search highlight by double tapping //
nmap <silent> // :nohlsearch<CR>

" " ========================================================================================
" assign q; to avoid shift pressing when searching last ex commands
nmap q; q:
vmap q; q:

map <leader>gr :grep <C-R><C-w><CR><CR><CR>
vmap <leader>gr :grep <C-R><C-w><CR><CR><CR>

nmap <C-]> g<C-]>

" Pink Error highlighting in c++ is not working
hi clear Error

hi CursorLine term=none cterm=none gui=none
hi CursorLineNr term=standout cterm=standout gui=standout

let g:airline_powerline_fonts=1



